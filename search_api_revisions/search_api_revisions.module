<?php

/**
 * @file
 * Provides indexing on entity revisions.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\search_api_revisions\Plugin\search_api\datasource\ContentEntityRevisions;

/**
 * Implements hook_entity_insert().
 *
 * Adds entry for the new entity to the tracking table for
 * each index that tracks entities of this type.
 *
 * By setting the $entity->search_api_skip_tracking property to a true-like
 * value before this hook is invoked, you can prevent this behavior and make the
 * Search API Revisions ignore this new entity.
 */
function search_api_revisions_entity_insert(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ContentEntityInterface) || $entity->search_api_skip_tracking) {
    return;
  }
  /** @var \Drupal\search_api\IndexInterface[] $indexes */
  $indexes = ContentEntityRevisions::getIndexesForEntity($entity);
  if (!$indexes) {
    return;
  }

  $datasource_id = 'entity_revision:' . $entity->getEntityTypeId();

  $item_ids = [
    $item_ids[] = $entity->id() . ':' . $entity->getRevisionId(),
  ];

  foreach ($indexes as $index) {
    $index->trackItemsInserted($datasource_id, $item_ids);
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Updates the corresponding tracking table entries for each index that tracks
 * this entity.
 *
 * Also takes care of new or deleted translations.
 *
 * By setting the $entity->search_api_skip_tracking property to a true-like
 * value before this hook is invoked, you can prevent this behavior and make the
 * Search API ignore this update.
 */
function search_api_revisions_entity_presave(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ContentEntityInterface) || $entity->search_api_skip_tracking) {
    return;
  }
  /** @var \Drupal\search_api\IndexInterface[] $indexes */
  $indexes = ContentEntityRevisions::getIndexesForEntity($entity);
  if (!$indexes) {
    return;
  }

  if (empty($entity->id())) {
    return;
  }

  $update_ids = [];

  $entity_type = $entity->getEntityType();
  $entity_table = $entity_type->getBaseTable();
  $entity_revision_key = $entity_type->getKey('revision');
  $entity_id_key = $entity_type->getKey('id');

  $select = \Drupal::database()->select($entity_table, 'et');
  $select->addField('et', $entity_revision_key, 'revision');
  $select->condition($entity_id_key, $entity->id());
  foreach ($select->execute()->fetchAll() as $item) {
    $update_ids[] = $entity->id() . ':' . $item->revision;
  }
  $entity->search_api_revisions_update_ids = $update_ids;
}

/**
 * Implements hook_entity_update().
 *
 * Updates the corresponding tracking table entries for each index that tracks
 * this entity.
 *
 * Also takes care of new or deleted translations.
 *
 * By setting the $entity->search_api_skip_tracking property to a true-like
 * value before this hook is invoked, you can prevent this behavior and make the
 * Search API ignore this update.
 */
function search_api_revisions_entity_update(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ContentEntityInterface) || $entity->search_api_skip_tracking) {
    return;
  }
  /** @var \Drupal\search_api\IndexInterface[] $indexes */
  $indexes = ContentEntityRevisions::getIndexesForEntity($entity);
  if (!$indexes) {
    return;
  }

  $datasource_id = 'entity_revision:' . $entity->getEntityTypeId();

  $insert_ids = [
    $entity->id() . ':' . $entity->getRevisionId(),
  ];
  foreach ($indexes as $index) {
    if (!empty($insert_ids)) {
      $index->trackItemsInserted($datasource_id, $insert_ids);
    }
    if (!empty($entity->search_api_revisions_update_ids)) {
      $index->trackItemsUpdated($datasource_id, $entity->search_api_revisions_update_ids);
    }
  }
}

/**
 * Implements hook_entity_predelete().
 *
 * Deletes all entries for this entity from the tracking table for each index
 * that tracks this entity type.
 *
 * This must be predelete because when using delete we have
 * no revisions in storage.
 *
 * By setting the $entity->search_api_skip_tracking property to a true-like
 * value before this hook is invoked, you can prevent this behavior and make the
 * Search API ignore this deletion. (Note that this might lead to stale data in
 * the tracking table or on the server, since the item will not removed from
 * there (if it has been added before).)
 */
function search_api_revisions_entity_predelete(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ContentEntityInterface) || $entity->search_api_skip_tracking) {
    return;
  }
  /** @var \Drupal\search_api\IndexInterface[] $indexes */
  $indexes = ContentEntityRevisions::getIndexesForEntity($entity);
  if (!$indexes) {
    return;
  }

  $datasource_id = 'entity_revision:' . $entity->getEntityTypeId();

  $item_ids = [];

  $entity_type = $entity->getEntityType();
  $entity_revision_table = $entity_type->getRevisionDataTable();
  $entity_revision_key = $entity_type->getKey('revision');
  $entity_id_key = $entity_type->getKey('id');

  $select = \Drupal::database()->select($entity_revision_table, 'ert');
  $select->addField('ert', $entity_revision_key, 'revision');
  $select->condition($entity_id_key, $entity->id());

  foreach ($select->execute()->fetchAll() as $item) {
    $item_ids[] = $entity->id() . ':' . $item->revision;
  }
  foreach ($indexes as $index) {
    $index->trackItemsDeleted($datasource_id, $item_ids);
  }
}

/**
 * Implements hook_entity_revision_delete().
 */
function search_api_revisions_entity_revision_delete(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ContentEntityInterface) || $entity->search_api_skip_tracking) {
    return;
  }
  $indexes = ContentEntityRevisions::getIndexesForEntity($entity);
  if (!$indexes) {
    return;
  }

  $datasource_id = 'entity_revision:' . $entity->getEntityTypeId();

  $item_ids = [
    $item_ids[] = $entity->id() . ':' . $entity->getRevisionId(),
  ];
  foreach ($indexes as $index) {
    $index->trackItemsDeleted($datasource_id, $item_ids);
  }
}
